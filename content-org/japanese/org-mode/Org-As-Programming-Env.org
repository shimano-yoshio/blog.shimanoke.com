#+TITLE: プログラミング環境としての Org mode（Babel）
#+LANGUAGE: ja
#+AUTHOR: 島野 善雄
#+EMAIL: shimano.yoshio@jp.fujitsu.com
#+OPTIONS: author:t prop:nil <:nil H:7
#+OPTIONS: toc:4 creator:nil timestamp:nil email:t  todo:nil pri:nil tags:nil
#+DESCRIPTION: LaTeX Tips
#+KEYWORDS:  Ubuntu Linux LaTeX
#+EXCLUDE_TAGS: noexport
#+STARTUP: indent


# 図目次の出力
#+LATEX: \listoffigures
#+TOC: figure
# 表目次の出力
#+TOC: tables 

# HTML Setting
#+INFOJS_OPT: view:showall
# #+INCLUDE: "~/Org/Templates/setup/theme-bigblow.setup" 
#+INCLUDE: "~/Org/Templates/setup/theme-readtheorg.setup" 

# ドキュメントクラスの指定
#+LATEX_CLASS: jsbook
# ドキュメントクラスのオプションの指定
#+LATEX_CLASS_OPTIONS: [a4j,12pt,openany,uplatex]
# カスタムスタイルの読み込み
#+LATEX_HEADER: \usepackage{shimano}

# ファイルのバージョン
#+LATEX_HEADER: \FileVerjou{1.0}

# tcolorbox でのプログラムリスト出力
# #+LATEX: \tcblistof[\chapter*]{box}{プログラムリスト}

# 本文はじまり
#+LATEX: \mainmatter

* はじめに
:PROPERTIES:
:ID:       cdfa3765-2bdc-4764-a3ca-9b559f4d35f7
:END:

Org-mode のドキュメントの中でプログラムを実行することができます.


** Org-Babel について
:PROPERTIES:
:ID:       726604a2-3248-4668-a792-98ee88f9d312
:END:

Org-Babel は, Org-mode の中でプログラムを記述し, そのプログラムを実行
し, その結果もまとめてしまおうというシステムです.

サポートされている言語はとても豊富です.

http://orgmode.org/worg/org-contrib/babel/languages.html によると,
2013 年 3 月現在, 
次の 言語がサポートされているそうです, 

#+NAME: tab-babel-lang
#+CAPTION: Babel がサポートしている言語
|----------------+-----------------+----------------------+---------------------------------------------|
| 言語           | 拡張子          | ドキュメント         | 必用なもの                                  |
|----------------+-----------------+----------------------+---------------------------------------------|
| Asymptote      | asymptote       | ob-doc-asymptote     | asymptote, asy-mode                         |
| Awk            | awk             | ob-doc-awk           | awk                                         |
| C              | c               | ob-doc-C             | none                                        |
| C++            | cpp             | ob-doc-C             | none                                        |
| Calc           | calc            |                      | none                                        |
| Clojure        | clojure         | ob-doc-clojure       | clojure, clojure-mode, slime, swank-clojure |
| CSS            | css             | ob-doc-css           | none                                        |
| Ditaa          | ditaa           | ob-doc-ditaa         | ditaa (bundled with Org-mode)               |
| Dot (Graphviz) | dot             | og-doc-dot           | dot                                         |
| Emacs Lisp     | emacs-lisp      |                      | none                                        |
| Eukleides      | eukleides       | ob-doc-eukleides     | eukleides                                   |
| Fomus          | fomus (contrib) |                      | fomus (music notation)                      |
| Fortran        | F90             |                      | fortran                                     |
| Gnuplot        | gnuplot         | ob-doc-gnuplot       | gnuplot, gnuplot-mode                       |
| Haskell        | haskell         |                      | haskell, haskell-mode, inf-haskell, lhs2tex |
| Java           | java            |                      | java                                        |
| Javascript     | js              |                      | node.js                                     |
| LaTeX          | latex           | ob-doc-latex         | latex, auctex, reftex                       |
| Ledger         | ledger          | ob-doc-ledger        | ledger                                      |
| Lilypond       | ly              | ob-doc-lilypond      | lilypond music notation                     |
| Lisp           | lisp            |                      | slime                                       |
| Make           | makefile        | ob-doc-makefile      | none                                        |
| Mathomatic     | mathomatic      | ob-doc-mathomatic    | Mathomatic                                  |
| Matlab         | matlab          | ob-doc-octave-matlab | matlab, matlab.el                           |
| Maxima         | max             | ob-doc-maxima        | maxima, Common Lisp, gnuplot (optional)     |
| Mscgen         | mscgen          | ob-doc-mscgen        | Mscgen                                      |
| Objective Caml | ocaml           |                      | ocaml, tuareg-mode                          |
| Octave         | octave          | ob-doc-octave-matlab | octave                                      |
| Org            | org             |                      | none                                        |
| OZ             | oz (contrib)    | ob-doc-oz            | Mozart which includes a major mode          |
| Perl           | perl            |                      | perl, cperl-mode (optional)                 |
| Picolisp       | picolisp        | ob-doc-picolisp      | PicoLisp                                    |
| PlantUML       | plantuml        |                      |                                             |
| Python         | python          |                      | python, python-mode (optional)              |
| R              | R               | ob-doc-R             | R, ess-mode, tikzDevice                     |
| Ruby           | ruby            |                      | ruby, irb, ruby-mode, inf-ruby mode         |
| Sass           | sass            |                      | sass, sass-mode                             |
| Scheme         | scheme          |                      | none                                        |
| Shen           | shen            |                      | shen                                        |
| shell          | sh              |                      | a shell                                     |
| SQL            | sql             |                      | none                                        |
| Sqlite         | sqlite          |                      | none                                        |
| Tcl            | tcl             | ob-doc-tcl           | tclsh                                       |
|----------------+-----------------+----------------------+---------------------------------------------|

Org-Babel の活用法には, 次のようなアイデアが考えられます.

- UML などの図の作成
- 複数の言語によるデータの収集, 解析の実行
- テストの仕様書兼実行ファイル兼レポート
- 実際に動くインストールマニュアル


* Babel を使った図の作成
:PROPERTIES:
:ID:       4d7029f1-56c4-468f-b0ef-86eb2460e4e7
:END:
** DONE Ditaa を使った図の作成
CLOSED: [2019-01-24 木 13:27] DEADLINE: <2019-02-09 土>
:PROPERTIES:
:ID:       2be4129e-fa20-4f8f-b1c5-68804eb56aea
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2019-01-24 木 13:27]
:END:
#+INDEX: Ditaa

- [[http://ditaa.sourceforge.net/][ditaa]]
- [[https://bl.ocks.org/nicerobot/8379371][ditaa: DIagrams Through Ascii Art http://ditaa.sourceforge.net - bl.ocks.org]]
- [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-ditaa.html][<code>Ditaa</code> Source Code Blocks in Org Mode]]
- [[http://misohena.jp/article/emacs_org_textfigures/ditaa.html][org-modeでditaaを使う]]
- [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-ditaa.html][<code>Ditaa</code> Source Code Blocks in Org Mode]]

*** Ditaa のインストール
:PROPERTIES:
:ID:       7dd55394-4ace-43bb-819a-b87d85746c0f
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2019-01-24 木 13:13]
:END:

**** 前もって必用なもの
:PROPERTIES:
:ID:       cfe7e499-f371-4d65-9eb9-d2a75219a712
:END:


**** 日本語対応 Ditaa のインストール
:PROPERTIES:
:ID:       97bfaa03-09bc-420f-9aea-3e4b0ca595be
:END:
Ditaa 本家のバイナリでは日本語がうまく動きません。

- https://github.com/luozengbin/dot.emacs.d/tree/master/extra/org-ditaa

から、

- https://github.com/luozengbin/dot.emacs.d/raw/master/extra/org-ditaa/jditaa.jar

をダウンロードします。私は /~/.spacemacs.d/bin/ に入れています。

**** Org mode の Ditaa 用の設定
:PROPERTIES:
:ID:       5ffe9b4f-0c87-44b2-89d0-48a192d98d77
:END:
Emacs の設定です。

#+CAPTION: Ditaa の実行ファイルへのパス
#+BEGIN_SRC emacs-lisp :tangle user-config.el
;; Ditaa の実行ファイルへのパス
(setq org-ditaa-jar-path "~/.spacemacs.d/bin/jditaa.jar")
#+END_SRC

*** Ditaa を使った図の例
:PROPERTIES:
:ID:       a735447a-056f-408a-b035-176407dc3de2
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2019-01-24 木 13:21]
:END:
:CLOCK:
CLOCK: [2019-01-24 木 13:13]--[2019-01-24 木 13:21] =>  0:08
:END:

#+BEGIN_SRC ditaa :file images/hello-world.png
+--------------+
|              |
| Hello World! |
|              |
+--------------+
#+END_SRC

#+RESULTS:
[[file:images/hello-world.png]]


#+BEGIN_SRC ditaa :file images/hello-world-round.png :cmdline -r
+--------------+
|              |
| Hello World! |
|              |
+--------------+
#+END_SRC

#+RESULTS:
[[file:images/hello-world-round.png]]

#+begin_src ditaa :file ditaa_example2.svg :cmdline -E
  +--------+---------+
  | AAA    |  111    |
  +--------+---------+
  | BBB    |  222    |-----------\
  +--------+---------+           |
                                 |
                                 v
                             +-------+
                             |       |
                             +-------+
#+end_src

#+RESULTS:
[[file:ditaa_example2.svg]]

#+begin_src ditaa :file ditaa_example-japan-2.svg :cmdline -E
  +--------+---------+
  | 一番目 |  二番目 |
  +--------+---------+
  | BBB    |  222    |-----------\
  +--------+---------+           |
                                 |
                                 v
                             +-------+
                             |       |
                             +-------+
#+end_src

#+RESULTS:
[[file:ditaa_example-japan-2.svg]]


** TODO PlantUML を使った UML の図の作成
DEADLINE: <2019-03-22 金>
:PROPERTIES:
:ID:       c868f86b-13c9-4508-97a9-b683120564c6
:END:
:CLOCK:
CLOCK: [2019-01-24 木 13:27]--[2019-01-24 木 14:11] =>  0:44
CLOCK: [2018-09-28 金 12:44]--[2018-09-28 金 14:32] =>  1:48
:END:

- [[http://plantuml.com/][シンプルなテキストファイルで UML が書ける、オープンソースのツール]]
- [[https://real-world-plantuml.com/][Real World PlantUML]]
- [[http://plantuml.com/][シンプルなテキストファイルで UML が書ける、オープンソースのツール]]


*** PlantUML のインストール
:PROPERTIES:
:ID:       869993e6-d695-48b3-9452-993bb146a530
:END:
- [[http://plantuml.com/download][ダウンロードのページ]]

から plantuml.jar をダウンロードし、パスがとおった場所にインストールします。

*** plantuml レイヤーのインストール
:PROPERTIES:
:ID:       f264e1c0-c432-4a41-aab4-133b666c50df
:END:
=dotspacemacs-configuration-layers= に =plantuml= を追加してください。

*** NEXT PlantUML の例
DEADLINE: [2018-09-30 日]
:PROPERTIES:
:ID:       78be68f6-27ff-4017-9b8c-d81e15165718
:END:
:CLOCK:
CLOCK: [2018-09-28 金 14:32]--[2018-09-28 金 17:47] =>  3:15
:END:

**** シーケンス図
:PROPERTIES:
:ID:       2ec5a227-7c84-4278-afef-3520ddb50832
:END:
#+BEGIN_SRC org  :eval no
  ,#+BEGIN_SRC plantuml  :file images/plantuml-sequeqnce1.png
  @startuml
  アリス -> Bob: Authentication Request
  Bob --> Alice: Authentication Response

  Alice -> Bob: Another authentication Request
  Alice <-- Bob: another authentication Response
  @enduml
  '#+END_SRC
#+END_SRC

#+BEGIN_SRC plantuml  :file images/plantuml-sequeqnce1.png
  @startuml
  アリス -> Bob: Authentication Request
  Bob --> アリス: Authentication Response

  アリス -> Bob: Another authentication Request
  アリス <-- Bob: another authentication Response
  @enduml
#+END_SRC

#+RESULTS:
[[file:images/plantuml-sequeqnce1.png]]



**** 応用
:PROPERTIES:
:ID:       37441b9d-73cf-4890-b400-40044727d9cb
:END:
- [[https://www.bitwin.ne.jp/blog/?p=360][PlantUMLで業務フロー図をらくらく作成 | ビットウィンのスタッフブログ]]

# #+BEGIN_SRC plantuml  :file images/gyoumu1.png


#+BEGIN_SRC plantuml  :file ./images/gyoumu1.png
:処理１;
:入力;
:入力OK;
:再入力;
:OK処理;
#+END_SRC

#+RESULTS:
[[file:./images/gyoumu1.png]]


#+BEGIN_SRC plantuml :file images/gyoumu2.png
:処理１;
:入力;
while (入力OK)
  :再入力;
endwhile
:OK処理;
#+END_SRC

#+RESULTS:
[[file:images/gyoumu2.png]]

#+BEGIN_SRC plantuml  :file images/gyoumu3.png
:処理１;
:処理２;
note
  注釈文
  ・・・
endnote
:入力;
while (入力OK)
  :再入力;
endwhile
:OK処理;
#+END_SRC

#+RESULTS:
[[file:images/gyoumu3.png]]

#+BEGIN_SRC plantuml  :file images/gyoumu1.png
@startuml
sprite $bProcess jar:archimate/business-process
sprite $aService jar:archimate/application-service
sprite $aComponent jar:archimate/application-component

rectangle "Handle claim"  as HC <<$bProcess>> #yellow 
rectangle "Capture Information"  as CI <<$bProcess>> #yellow
rectangle "Notify\nAdditional Stakeholders" as NAS <<$bProcess>> #yellow
rectangle "Validate" as V <<$bProcess>> #yellow
rectangle "Investigate" as I <<$bProcess>> #yellow
rectangle "Pay" as P <<$bProcess>> #yellow

HC *-down- CI
HC *-down- NAS
HC *-down- V
HC *-down- I
HC *-down- P


CI -right->> NAS
NAS -right->> V
V -right->> I
I -right->> P



rectangle "Scanning" as scanning <<$aService>> #A9DCDF
rectangle "Customer admnistration" as customerAdministration <<$aService>> #A9DCDF
rectangle "Claims admnistration" as claimsAdministration <<$aService>> #A9DCDF
rectangle Printing  <<$aService>> #A9DCDF
rectangle Payment  <<$aService>> #A9DCDF

scanning -up-> CI
customerAdministration  -up-> CI
claimsAdministration -up-> NAS
claimsAdministration -up-> V
claimsAdministration -up-> I
Printing -up-> V
Printing -up-> P
Payment -up-> P

rectangle "Document\nManagement\nSystem" as DMS <<$aComponent>> #A9DCDF
rectangle "General\nCRM\nSystem" as CRM <<$aComponent>> #A9DCDF
rectangle "Home & Away\nPolicy\nAdministration" as HAPA <<$aComponent>> #A9DCDF
rectangle "Home & Away\nFinancial\nAdministration" as HFPA <<$aComponent>> #A9DCDF

DMS .up.|> scanning
DMS .up.|> Printing
CRM .up.|> customerAdministration
HAPA .up.|> claimsAdministration
HFPA .up.|> Payment

legend left
Example from the "Archisurance case study" (OpenGroup).
See 
==
<$bProcess> :business process
==
<$aSrv> : application service
==
<$aComp> : appplication component
endlegend
@enduml
#+END_SRC

#+RESULTS:
[[file:images/gyoumu1.png]]

#+BEGIN_SRC plantuml  :file images/gyoumu3.png
@startuml
salt
{
  Just plain text
  [This is my button]
  ()  Unchecked radio
  (X) Checked radio
  []  Unchecked box
  [X] Checked box
  "Enter text here   "
  ^This is a droplist^
}
@enduml
#+END_SRC

#+RESULTS:
[[file:images/gyoumu3.png]]

** Dot を使う
:PROPERTIES:
:ID:       b807bc16-9582-4eda-a1c6-cda49302e95a
:END:

- [[https://ja.wikipedia.org/wiki/DOT%25E8%25A8%2580%25E8%25AA%259E][DOT言語 - Wikipedia]]
- [[https://dev.classmethod.jp/tool/graphviz-beginner/][テキストデータをグラフ画像に変換するツール「Graphviz」ことはじめ ｜ Developers.IO]]
- [[https://qiita.com/rubytomato@github/items/51779135bc4b77c8c20d][Graphvizとdot言語でグラフを描く方法のまとめ]]
- 
- [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-dot.html][Dot Source Code Blocks in Org Mode]]
- https://iroha208.com/categories/graphviz/01/
- [[http://twinbird-htn.hatenablog.com/entry/2016/03/04/220933][Graphvizの使い方を例題で覚える - write ahead log]]



*** インストール
:PROPERTIES:
:ID:       82008754-9ba5-42bf-923d-d9cff5dcbf81
:END:

sudo apt install graphviz
* プログラミング言語の実行                                     :RefileTarget:
:PROPERTIES:
:ID:       b241b9f8-85a7-49f8-ad27-42b3f29986c3
:END:
** Org mode から IPython を使う
:PROPERTIES:
:CapturedOn: [2016-09-21 Wed 16:48]
:ID:       ab72b1d6-4ba4-4651-8452-c21a790efc04
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2016-09-27 Tue 16:23]
:END:
:CLOCK:
CLOCK: [2016-09-27 Tue 15:32]--[2016-09-27 Tue 16:24] =>  0:52
CLOCK: [2016-09-21 Wed 17:08]--[2016-09-21 Wed 17:09] =>  0:01
CLOCK: [2016-09-21 Wed 16:52]--[2016-09-21 Wed 17:08] =>  0:16
:END:

 - [[https://github.com/gregsexton/ob-ipython][GitHub - gregsexton/ob-ipython: org-babel integration with Jupyter for evaluation of (Python by default) code blocks]]a
Org mode の中から IPython (Jupyter) を使うことができます。


*** インストール
:PROPERTIES:
:ID:       1fd38e58-7b56-46dd-95a2-1cb17d709a80
:END:

**** IPython のインストール
:PROPERTIES:
:ID:       4ae255dc-2806-4b02-8889-443ed62863f8
:END:


pip isntall mglearn
**** 設定
:PROPERTIES:
:ID:       db637535-4973-4474-be29-38b2c8e91511
:END:

#+CAPTION: ob-ipython の設定
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat (getenv "HOME") "~/.pyenv/shims:" (getenv "PATH")))
(setq exec-path (cons (concat (getenv "HOME") "~/.pyenv/shims") exec-path))
#+END_SRC


*** 例
:PROPERTIES:
:ID:       5673185b-28a3-4a6b-a3a4-515175949dfb
:END:

必要なライブラリをインポートします:


#+BEGIN_SRC ipython :session test1
  %matplotlib inline
  import matplotlib.pyplot as plt
  import numpy as np
#+END_SRC

#+RESULTS:

関数の例です:

#+BEGIN_SRC ipython :session test1 :exports both
  def foo(x):
      return x + 9

  [foo(x) + 7 for x in range(7)]
#+END_SRC

#+RESULTS:
#+begin_example
[16, 17, 18, 19, 20, 21, 22]
#+end_example


ヒストグラムの例です:



#+BEGIN_SRC ipython :session test1 :ipyfile images/test_hist.svg :exports both :results raw drawer
  plt.hist(np.random.randn(20000), bins=200)
#+END_SRC

#+RESULTS:
:RESULTS:
#+BEGIN_EXAMPLE
  (array([  1.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
  0.,   0.,   0.,   0.,   0.,   2.,   1.,   0.,   0.,   1.,   0.,
  1.,   4.,   2.,   1.,   1.,   2.,   3.,   3.,   3.,   1.,   2.,
  3.,   6.,   4.,   8.,  11.,  12.,  10.,  15.,  21.,  14.,  17.,
  16.,  13.,  19.,  27.,  25.,  35.,  35.,  35.,  36.,  44.,  39.,
  56.,  54.,  72.,  70.,  65.,  85.,  86.,  94.,  88., 112., 107.,
  114., 123., 127., 144., 165., 176., 184., 182., 199., 188., 200.,
  231., 222., 233., 237., 233., 267., 267., 243., 312., 285., 315.,
  325., 316., 335., 305., 364., 314., 338., 349., 374., 374., 360.,
  326., 314., 317., 330., 350., 317., 349., 348., 328., 352., 337.,
  302., 308., 305., 261., 273., 273., 229., 268., 253., 241., 254.,
  201., 229., 200., 198., 211., 172., 183., 178., 160., 152., 114.,
  129.,  96., 122.,  95.,  96.,  92.,  99.,  64.,  81.,  57.,  75.,
  53.,  51.,  39.,  38.,  46.,  33.,  36.,  24.,  30.,  26.,  27.,
  18.,  18.,  13.,  22.,  12.,  20.,  18.,  10.,   8.,   6.,   5.,
  8.,   5.,   5.,   1.,   8.,   2.,   2.,   3.,   3.,   2.,   0.,
  1.,   1.,   0.,   0.,   0.,   2.,   0.,   0.,   0.,   0.,   0.,
  0.,   1.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
  0.,   1.]),
  array([-4.35766896e+00, -4.31406946e+00, -4.27046996e+00, -4.22687046e+00,
  -4.18327097e+00, -4.13967147e+00, -4.09607197e+00, -4.05247247e+00,
  -4.00887297e+00, -3.96527348e+00, -3.92167398e+00, -3.87807448e+00,
  -3.83447498e+00, -3.79087548e+00, -3.74727599e+00, -3.70367649e+00,
  -3.66007699e+00, -3.61647749e+00, -3.57287800e+00, -3.52927850e+00,
  -3.48567900e+00, -3.44207950e+00, -3.39848000e+00, -3.35488051e+00,
  -3.31128101e+00, -3.26768151e+00, -3.22408201e+00, -3.18048251e+00,
  -3.13688302e+00, -3.09328352e+00, -3.04968402e+00, -3.00608452e+00,
  -2.96248503e+00, -2.91888553e+00, -2.87528603e+00, -2.83168653e+00,
  -2.78808703e+00, -2.74448754e+00, -2.70088804e+00, -2.65728854e+00,
  -2.61368904e+00, -2.57008954e+00, -2.52649005e+00, -2.48289055e+00,
  -2.43929105e+00, -2.39569155e+00, -2.35209206e+00, -2.30849256e+00,
  -2.26489306e+00, -2.22129356e+00, -2.17769406e+00, -2.13409457e+00,
  -2.09049507e+00, -2.04689557e+00, -2.00329607e+00, -1.95969657e+00,
  -1.91609708e+00, -1.87249758e+00, -1.82889808e+00, -1.78529858e+00,
  -1.74169909e+00, -1.69809959e+00, -1.65450009e+00, -1.61090059e+00,
  -1.56730109e+00, -1.52370160e+00, -1.48010210e+00, -1.43650260e+00,
  -1.39290310e+00, -1.34930361e+00, -1.30570411e+00, -1.26210461e+00,
  -1.21850511e+00, -1.17490561e+00, -1.13130612e+00, -1.08770662e+00,
  -1.04410712e+00, -1.00050762e+00, -9.56908124e-01, -9.13308627e-01,
  -8.69709129e-01, -8.26109631e-01, -7.82510133e-01, -7.38910635e-01,
  -6.95311137e-01, -6.51711639e-01, -6.08112142e-01, -5.64512644e-01,
  -5.20913146e-01, -4.77313648e-01, -4.33714150e-01, -3.90114652e-01,
  -3.46515155e-01, -3.02915657e-01, -2.59316159e-01, -2.15716661e-01,
  -1.72117163e-01, -1.28517665e-01, -8.49181674e-02, -4.13186696e-02,
  2.28082826e-03,  4.58803261e-02,  8.94798240e-02,  1.33079322e-01,
  1.76678820e-01,  2.20278318e-01,  2.63877815e-01,  3.07477313e-01,
  3.51076811e-01,  3.94676309e-01,  4.38275807e-01,  4.81875305e-01,
  5.25474802e-01,  5.69074300e-01,  6.12673798e-01,  6.56273296e-01,
  6.99872794e-01,  7.43472292e-01,  7.87071790e-01,  8.30671287e-01,
  8.74270785e-01,  9.17870283e-01,  9.61469781e-01,  1.00506928e+00,
  1.04866878e+00,  1.09226827e+00,  1.13586777e+00,  1.17946727e+00,
  1.22306677e+00,  1.26666627e+00,  1.31026576e+00,  1.35386526e+00,
  1.39746476e+00,  1.44106426e+00,  1.48466376e+00,  1.52826325e+00,
  1.57186275e+00,  1.61546225e+00,  1.65906175e+00,  1.70266124e+00,
  1.74626074e+00,  1.78986024e+00,  1.83345974e+00,  1.87705924e+00,
  1.92065873e+00,  1.96425823e+00,  2.00785773e+00,  2.05145723e+00,
  2.09505673e+00,  2.13865622e+00,  2.18225572e+00,  2.22585522e+00,
  2.26945472e+00,  2.31305421e+00,  2.35665371e+00,  2.40025321e+00,
  2.44385271e+00,  2.48745221e+00,  2.53105170e+00,  2.57465120e+00,
  2.61825070e+00,  2.66185020e+00,  2.70544969e+00,  2.74904919e+00,
  2.79264869e+00,  2.83624819e+00,  2.87984769e+00,  2.92344718e+00,
  2.96704668e+00,  3.01064618e+00,  3.05424568e+00,  3.09784518e+00,
  3.14144467e+00,  3.18504417e+00,  3.22864367e+00,  3.27224317e+00,
  3.31584266e+00,  3.35944216e+00,  3.40304166e+00,  3.44664116e+00,
  3.49024066e+00,  3.53384015e+00,  3.57743965e+00,  3.62103915e+00,
  3.66463865e+00,  3.70823815e+00,  3.75183764e+00,  3.79543714e+00,
  3.83903664e+00,  3.88263614e+00,  3.92623563e+00,  3.96983513e+00,
  4.01343463e+00,  4.05703413e+00,  4.10063363e+00,  4.14423312e+00,
  4.18783262e+00,  4.23143212e+00,  4.27503162e+00,  4.31863112e+00,
  4.36223061e+00]),
  <a list of 200 Patch objects>)
#+END_EXAMPLE
[[file:images/test_hist.svg]]
:END:







*** Readme.org の翻訳                                            :noexport:
:PROPERTIES:
:ID:       bcdcc3dd-9f49-4496-b25d-2c33a5d67ecf
:END:

**** これは何か?
:PROPERTIES:
:ID:       dd9c2e14-b1b7-4b92-b427-8428585acc0e
:END:

Org mode が Jupyter カーネルを使って、コードブロック(デフォルトでは Python)を評価することを可能にする、
Emacs のライブラリです。

***** なぜ IPython ノートブックを使わないのか?
:PROPERTIES:
:ID:       fbd39380-1c66-49c3-a081-3774c74a8cf9
:END:

私は IPython ノートブックを使おうとしましたが、
すぐに、ウエブブラウザの中でコードを書こうとすることで、フラストレーションがたまりました。
Emacs の中で実行可能な Python のコードを含んでいるドキュメントを
作成するための別の選択肢を、これは提供します
- 必要とること、全てがあります。

***** Why not use [[https://millejoh.github.io/emacs-ipython-notebook/][EIN]]?
:PROPERTIES:
:ID:       d956f77b-67c3-4fbf-8771-b767a98e2c16
:END:

EIN は本当に素晴しいです。
それはしばらくの間私を幸せに保ちましたが、
IPython ノートブックのセルフォーマットに制約を受けていると、私は感じはじめました。
私が本当に望んでいたことは、 Org のドキュメントの中にコードを埋め込むということでした。
Org mode と競争することは大変です!
Org の良いことのいくつかのキーとなる点です:

- 私の意見では、Org のマークアップのほうが Markdown のマークアップよりも良いです。
- Org の構成機能、編集、 ナビゲーション機能は EIN よりもずっと良いです。
- Org の表...
- Org は複数のフォーマットへエクスポートすることができます。
- I 私は
  like 好きです
  how   Org   opens   a new buffer Org が新しいバッファを開く方法が
  when editing 編集するときに
  code コードを
  so that you  can use 使うことがでいるように
  a Python major mode Python メジャーモードを
  rather than trying to handle 
    multiple major modes in one.

I 私は
also また
found myself 自分自身が
hitting 出会っていること
bugs in EIN EIN の中のバグに
where evaluation 評価と
and doc lookup 
would just stop working. 単に動かなくなってしまう
私は定期的にバッファをキルして再度開くか、IPython カーネルを再スタートする必要があり、
これはフラストレーションをためてきました。

***** How does this compare to regular Org Python integration (ob-python)?
:PROPERTIES:
:ID:       eeefa79a-a7c2-44c5-ab67-e019ad587ae7
:END:

これがより堅牢であると、私は考えています。
この目的のためにデザインされたアーキテクチャを持つ、
動いている IPython カーネルへ、 実行されたコードは送られます。
ob-python が動く方法は少しトリッキーに感じられます。
I 私は
ran in 陥りました
to race conditions 競合状態に
using ob-python ob-python を使うときに
where the Org buffer Org のバッファがその結果を更新してしまう
would update its results before the Python had finished evaluating the code block.  REPL Python REPL がそのコードブロックの評価を終了する前に、
これが最終的にこれを書くように私を駆り立てたことです。

これからプロットやイメージを得ることはより簡単です。
I also また私は、
provide 提供しています
several features 複数の機能を
I 私が
missed 欲しいと思っていた
when 使うときに
using plain ob-python, ただの ob-python を
such as looking up documentation ドキュメントの参照や
and getting IPython-style tracebacks 
when things go wrong.

~%timeit~ といった、IPython 固有の機能を使うこともできます。

**** スクリーンショット
:PROPERTIES:
:ID:       b232a38d-52c8-443f-af15-6d9e54136166
:END:

**** どうやってこれをインストールしますか?
:PROPERTIES:
:ID:       ff2beb31-d756-4302-9407-dee0896ee740
:END:

***** 最初に IPython が必要です
:PROPERTIES:
:ID:       1ea58825-0bd3-4827-a89b-851e1e41f58e
:END:

Before installing, インストールする前に、
you'll need 必要です
Jupyter (>= 1.0) Jupyter (>= 1.0) と
and the IPython kernel (>= 5.0) installed IPython kernel (>= 5.0) カーネルを
and working. インストールして動かしておくことが
You will also また、
need 必要です
 [[http://www.tornadoweb.org/en/stable/][Tornado]] and the [[http://jupyter.readthedocs.org/en/latest/install.html][Jupyter]] console  [[http://www.tornadoweb.org/en/stable/][Tornado]] と [[http://jupyter.readthedocs.org/en/latest/install.html][Jupyter]] コンソールが
and client (~jupyter_console~,
    ~jupyter_client~) libraries. 
All of this 
should be trivially 
installable using pip. 
この全てを pip を使って簡単にインストールすることができます。

***** Emacs プラグインのインストール
:PROPERTIES:
:ID:       e0e03ca6-6510-4642-bafc-b014abde8e1c
:END:

このパッケージは MELPA の中にあります。
私はそこからインストールすることを推奨します。

そうでなければ、手動でのインストール用には、最初に次の Elisp の依存物が必要です:

- https://github.com/magnars/dash.el
- Including dash-functional
- https://github.com/magnars/s.el
- https://github.com/rejeep/f.el

次に、単にロードパスのどこかにこれを置いて、~(require 'ob-ipython)~ してください。

最後に次を使って、 Org-Babel の中で ~ipython~ を有効にしてください:

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ipython . t)
     ;; other languages..
     ))
#+END_SRC

**** どうやってそれを使うのですか?
:PROPERTIES:
:ID:       6f5cb269-1bae-4e21-9534-4f18dbf617fc
:END:

Org のファイルを開いて、SRC ブロックを追加して、
Org の SRC ブロックと同じように評価してください(通常は =C-c C-c=)。
ここで私はいくつかの例となるブロックを示していきます。

これは最も基本的な ipython ブロックです。
session 引数を提供しなければ *なりません*。
状態を分けたいのであれば、セッションに名前をつけることができます。

#+BEGIN_SRC org :eval no
  ,#+BEGIN_SRC ipython :session
    %matplotlib inline
    import matplotlib.pyplot as plt
    import numpy as np
  ,#+END_SRC
#+END_SRC


#+BEGIN_SRC ipython :session :eval no
  %matplotlib inline
  import matplotlib.pyplot as plt
  import numpy as np
#+END_SRC

#+RESULTS:

ここで私たちは、名前つきセッションを使って、
関数定義を持ついくつかのコードを評価します。

#+BEGIN_SRC org :eval no
  ,#+BEGIN_SRC ipython :session mysession :exports both
    def foo(x):
        return x + 9

    [foo(x) + 7 for x in range(7)]
  ,#+END_SRC

  ,#+RESULTS:
  : [16, 17, 18, 19, 20, 21, 22]
#+END_SRC

#+BEGIN_SRC ipython :session :exports both :eval no
  def foo(x):
      return x + 9

  [foo(x) + 7 for x in range(7)]
#+END_SRC

#+RESULTS:
: [16, 17, 18, 19, 20, 21, 22]


これはグラフィック出力を得る方法です。
file 引数に注意してください。
これを提供しなければなりません。
これを評価する前に、~%matplotlib inline~ を評価しているということも確実にしなければなりません。

#+BEGIN_SRC org :eval no
  ,#+BEGIN_SRC ipython :session mysession :file /tmp/image.png :exports both
    plt.hist(np.random.randn(20000), bins=200)
  ,#+END_SRC
#+END_SRC

#+BEGIN_SRC ipython :session :ipythonfile images/ipython-sample.png :exports both
  plt.hist(np.random.randn(20000), bins=200)
#+END_SRC

#+RESULTS:
#+begin_example
# Out[24]:
,#+BEGIN_EXAMPLE
  (array([   1.,    0.,    1.,    0.,    0.,    2.,    1.,    0.,    0.,
  1.,    2.,    2.,    1.,    1.,    0.,    6.,    2.,    5.,
  0.,    2.,    5.,    5.,    3.,    4.,    6.,    9.,   13.,
  5.,    8.,    7.,   15.,    7.,   14.,   12.,   18.,   15.,
  20.,   21.,   31.,   27.,   22.,   40.,   44.,   33.,   48.,
  52.,   48.,   53.,   46.,   63.,   62.,   68.,   85.,   80.,
  88.,   96.,   95.,  118.,  104.,  112.,  142.,  131.,  128.,
  141.,  165.,  170.,  175.,  167.,  175.,  181.,  205.,  207.,
  212.,  227.,  251.,  231.,  220.,  251.,  247.,  258.,  277.,
  301.,  264.,  239.,  260.,  264.,  267.,  304.,  322.,  332.,
  316.,  318.,  318.,  298.,  326.,  309.,  327.,  311.,  296.,
  331.,  306.,  289.,  314.,  307.,  301.,  312.,  301.,  294.,
  256.,  286.,  267.,  261.,  261.,  252.,  225.,  223.,  230.,
  222.,  207.,  211.,  182.,  205.,  171.,  185.,  151.,  152.,
  161.,  137.,  128.,  136.,  105.,   98.,   95.,   95.,   82.,
  86.,   74.,   61.,   69.,   68.,   55.,   58.,   62.,   51.,
  52.,   34.,   44.,   39.,   32.,   30.,   38.,   20.,   27.,
  17.,   20.,   14.,   14.,   16.,   10.,    7.,   12.,   14.,
  8.,    9.,    7.,    3.,    7.,    3.,    9.,    1.,    5.,
  3.,    1.,    0.,    2.,    4.,    2.,    1.,    0.,    1.,
  0.,    0.,    2.,    1.,    0.,    1.,    0.,    1.,    0.,
  0.,    1.,    0.,    1.,    0.,    1.,    0.,    0.,    0.,
  0.,    1.]),
  array([ -3.80377708e+00,  -3.76376278e+00,  -3.72374847e+00,
  -3.68373417e+00,  -3.64371987e+00,  -3.60370556e+00,
  -3.56369126e+00,  -3.52367695e+00,  -3.48366265e+00,
  -3.44364835e+00,  -3.40363404e+00,  -3.36361974e+00,
  -3.32360543e+00,  -3.28359113e+00,  -3.24357683e+00,
  -3.20356252e+00,  -3.16354822e+00,  -3.12353391e+00,
  -3.08351961e+00,  -3.04350531e+00,  -3.00349100e+00,
  -2.96347670e+00,  -2.92346239e+00,  -2.88344809e+00,
  -2.84343379e+00,  -2.80341948e+00,  -2.76340518e+00,
  -2.72339087e+00,  -2.68337657e+00,  -2.64336227e+00,
  -2.60334796e+00,  -2.56333366e+00,  -2.52331935e+00,
  -2.48330505e+00,  -2.44329075e+00,  -2.40327644e+00,
  -2.36326214e+00,  -2.32324783e+00,  -2.28323353e+00,
  -2.24321923e+00,  -2.20320492e+00,  -2.16319062e+00,
  -2.12317631e+00,  -2.08316201e+00,  -2.04314771e+00,
  -2.00313340e+00,  -1.96311910e+00,  -1.92310479e+00,
  -1.88309049e+00,  -1.84307619e+00,  -1.80306188e+00,
  -1.76304758e+00,  -1.72303327e+00,  -1.68301897e+00,
  -1.64300467e+00,  -1.60299036e+00,  -1.56297606e+00,
  -1.52296175e+00,  -1.48294745e+00,  -1.44293315e+00,
  -1.40291884e+00,  -1.36290454e+00,  -1.32289023e+00,
  -1.28287593e+00,  -1.24286163e+00,  -1.20284732e+00,
  -1.16283302e+00,  -1.12281871e+00,  -1.08280441e+00,
  -1.04279011e+00,  -1.00277580e+00,  -9.62761498e-01,
  -9.22747194e-01,  -8.82732890e-01,  -8.42718586e-01,
  -8.02704282e-01,  -7.62689978e-01,  -7.22675674e-01,
  -6.82661370e-01,  -6.42647066e-01,  -6.02632762e-01,
  -5.62618458e-01,  -5.22604154e-01,  -4.82589850e-01,
  -4.42575546e-01,  -4.02561242e-01,  -3.62546938e-01,
  -3.22532634e-01,  -2.82518330e-01,  -2.42504026e-01,
  -2.02489722e-01,  -1.62475418e-01,  -1.22461114e-01,
  -8.24468096e-02,  -4.24325056e-02,  -2.41820160e-03,
  3.75961024e-02,   7.76104064e-02,   1.17624710e-01,
  1.57639014e-01,   1.97653318e-01,   2.37667622e-01,
  2.77681926e-01,   3.17696230e-01,   3.57710534e-01,
  3.97724838e-01,   4.37739142e-01,   4.77753446e-01,
  5.17767750e-01,   5.57782054e-01,   5.97796358e-01,
  6.37810662e-01,   6.77824966e-01,   7.17839270e-01,
  7.57853574e-01,   7.97867878e-01,   8.37882182e-01,
  8.77896486e-01,   9.17910790e-01,   9.57925094e-01,
  9.97939398e-01,   1.03795370e+00,   1.07796801e+00,
  1.11798231e+00,   1.15799661e+00,   1.19801092e+00,
  1.23802522e+00,   1.27803953e+00,   1.31805383e+00,
  1.35806813e+00,   1.39808244e+00,   1.43809674e+00,
  1.47811105e+00,   1.51812535e+00,   1.55813965e+00,
  1.59815396e+00,   1.63816826e+00,   1.67818257e+00,
  1.71819687e+00,   1.75821117e+00,   1.79822548e+00,
  1.83823978e+00,   1.87825409e+00,   1.91826839e+00,
  1.95828269e+00,   1.99829700e+00,   2.03831130e+00,
  2.07832561e+00,   2.11833991e+00,   2.15835421e+00,
  2.19836852e+00,   2.23838282e+00,   2.27839713e+00,
  2.31841143e+00,   2.35842573e+00,   2.39844004e+00,
  2.43845434e+00,   2.47846865e+00,   2.51848295e+00,
  2.55849725e+00,   2.59851156e+00,   2.63852586e+00,
  2.67854017e+00,   2.71855447e+00,   2.75856877e+00,
  2.79858308e+00,   2.83859738e+00,   2.87861169e+00,
  2.91862599e+00,   2.95864029e+00,   2.99865460e+00,
  3.03866890e+00,   3.07868321e+00,   3.11869751e+00,
  3.15871181e+00,   3.19872612e+00,   3.23874042e+00,
  3.27875473e+00,   3.31876903e+00,   3.35878333e+00,
  3.39879764e+00,   3.43881194e+00,   3.47882625e+00,
  3.51884055e+00,   3.55885485e+00,   3.59886916e+00,
  3.63888346e+00,   3.67889777e+00,   3.71891207e+00,
  3.75892637e+00,   3.79894068e+00,   3.83895498e+00,
  3.87896929e+00,   3.91898359e+00,   3.95899789e+00,
  3.99901220e+00,   4.03902650e+00,   4.07904081e+00,
  4.11905511e+00,   4.15906941e+00,   4.19908372e+00]),
  <a list of 200 Patch objects>)
,#+END_EXAMPLE
[[file:./obipy-resources/3187639y.png]]
#+end_example

PNG ではなく SVG のグラフィックを作るためには、
IPython に対してグローバルに出力フォーマットを指定することができます。

#+BEGIN_EXAMPLE
%config InlineBackend.figure_format = 'svg'
#+END_EXAMPLE

特定の Jupyter カーネルを使いたいのであれば、
カーネルオプションを渡すことができます。
Python 以外の言語ともに ob-ipython を使うことを、これは可能にします。
これが使えるようになる前に、
その言語用の Jupyter カーネルをインストールして、動かしておく必要があります。

異なる言語のコードを混ぜるときには、session 引数を使用する必要があるでしょう。

#+BEGIN_SRC org :eval no
  ,#+BEGIN_SRC ipython :session mysession :kernel clojure
    (+ 1 2)
  ,#+END_SRC

  ,#+RESULTS:
  : 3
#+END_SRC

コードに対して変数や表さえも渡すことを、 ob-ipython はサポートしています。

#+BEGIN_SRC org :eval no
  ,#+TBLNAME: data_table
  | a | 1 | 2 |
  | b | 2 | 3 |
  | c | 3 | 4 |

  ,#+BEGIN_SRC ipython :session :exports both :var x=2 :var data=data_table
    (x, data)
  ,#+END_SRC

  ,#+RESULTS:
  : (2, [['a', 1, 2], ['b', 2, 3], ['c', 3, 4]])
   #+END_SRC

#+TBLNAME: data_table
| a | 1 | 2 |
| b | 2 | 3 |
| c | 3 | 4 |

#+BEGIN_SRC ipython :session :exports both :var x=2 :var data=data_table :eval no
  (x, data)
#+END_SRC

#+RESULTS:
: (2, [['a', 1, 2], ['b', 2, 3], ['c', 3, 4]])


**** Org のソースブロックの評価用に、どんな機能がありますか?
:PROPERTIES:
:ID:       a8511171-47f2-4796-9323-87e1fff897e9
:END:

- 実行している IPython カーネルにドキュメントを要求することができます。
  興味がある場所にポイントを置いて、
  SRC ブロックを開いて、=M-x ob-ipython-inspect= を実行してください。
  これをキーにバインドすることを推奨します。

- REPL を使ってコードを扱うほうが、しばしばより簡単です。
  ポイントを ipython の SRC ブロックの中に置いて、
  =C-c C-v C-z= を実行することによって、現在のカーネルにつながっている REPL を開くことができます。
  今 python-mode が、コードバッファの中で補完を提供するために、 この REPL を使うことができるので、
  とにかくこれを行なうことを、私は推奨します。

- 評価されたコードがエラーを生成したら、
  これは IPython のトレースバックサポートを使って、バッファの中で綺麗に表示されます。

- 評価からの標準出力はポップアップバッファの中に表示されます。
  This これは
   is great 素晴しいです
   for debugging デバッグと
   or getting verbose output 冗長な出力を得るために
   that is best    left out of documents. 
   ドキュメントの中で標準出力をキャプチャすることを望むのであれば、
   =:results output= SRC ブロックヘッダー引数をど使ってください。

- 実行しているカーネルを中断したり、キルすることができます。
  This is helpful これが助けになります
  if  things get stuck 
  or really broken. 
  それぞれ =M-x  ob-ipython-interrupt-kernel= と =M-x ob-ipython-kill-kernel= を見てください。

**** コツとトリック
:PROPERTIES:
:ID:       d8e7fc14-e5f4-465d-a3d4-79a33936bfbe
:END:

これらは、人生をより良くするために、 私がセットアップしてあるいくつかのことです。
これらは ob-ipython とともに提供されてはいませんが、推奨されます。

- Be sure to use ~%matplotlib inline~, otherwise graphics won't work.

- 私はソースブロックを作成するために yasnippet を使っています。
  これは私が使っているスニペットです。
  それは(私が望むときには)ユニークなファイル名を生成する面倒をみてくれるので、 
  私はこれについて考える必要はありません。

#+BEGIN_SRC snippet :eval no
  # -*- mode: snippet -*-
  # name: ipython block
  # key: py
  # --
  ,#+BEGIN_SRC ipython :session ${1::file ${2:$$(let ((temporary-file-directory "./")) (make-temp-file "py" nil ".png"))} }:exports ${3:both}
  $0
  ,#+END_SRC
#+END_SRC

- 私は次の Org の設定を使っています:

  #+BEGIN_SRC emacs-lisp :eval no
    (setq org-confirm-babel-evaluate nil)   ;don't prompt me to confirm everytime I want to evaluate a block

    ;;; 評価した後にイメージを表示/更新する
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  #+END_SRC

- Python のバッファの中で補完が得られるように、 =C-c C-v C-z= を使って REPL を開いてください。

**** Help, it doesn't work
:PROPERTIES:
:ID:       4f2b5f6a-693e-4ac4-a1af-d6fe7f67e2a9
:END:

行なうべき最初のことは、
必要な依存物の全てがあるということをチェックするということです。
Several common problems 複数のよくある問題がこのプロジェクトのイッシューの中で解決されてきたので、 
have been resolved in the project's issues, so take a look there そこを見てください
to see 確認するために
if your problem has a quick fix. 
そうでなければ、自由にイッシューをあげてください
- 私は手助けをするためにベストをつくします。

** Org-mode で maxima を使う
:PROPERTIES:
:ID:       d1cb013b-a9f4-4e87-9bd8-bc016d38dd45
:END:
:CLOCK:
- State "DONE"       from "TODO"       [2013-02-22 金 10:56]
CLOCK: [2013-02-22 金 10:42]--[2013-02-22 金 10:56] =>  0:14
CLOCK: [2016-09-23 Fri 17:04]--[2016-09-23 Fri 17:16] =>  0:12
:END:

-  [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-maxima.html][Maxima Source Code Blocks in Org Mode]]


maxima-mode を使う設定です.

#+BEGIN_SRC emacs-lisp
 (autoload 'maxima-mode "maxima" "Maxima mode" t)
 (autoload 'imaxima "imaxima" "Frontend for maxima with Image support" t)
 (autoload 'maxima "maxima" "Maxima interaction" t)
 (autoload 'imath-mode "imath" "Imath mode for math formula input" t)
 (setq imaxima-use-maxima-mode-flag t)
#+END_SRC




*** Maxima のインストール
:PROPERTIES:
:ID:       9c080af9-e713-42b1-8f52-e0e5e1e220c5
:END:

: sudo apt install maxima

*** Maxima Source Code Blocks in Org Mode の日本語訳
:PROPERTIES:
:ID:       4c0f4be9-84fe-435e-be23-fc8b908aa8b2
:END:
- [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-maxima.html][Maxima Source Code Blocks in Org Mode]]


**** イントロダクション
:PROPERTIES:
:ID:       493c1239-c3f1-4a7e-be11-d9e416298a24
:END:
was originally released in 1982.  
Maxima は Macsyma から派生したコンピュータ代数システムであり、
これは元々 1982 年にリリースされました。
それは GNU General Public License でリリースされています。

Maxima は Common Lisp で書かれています。
それに Lisp を使ってアクセスして、拡張することができます。

**** 必要なものとセットアップ
:PROPERTIES:
:ID:       f65058e3-7921-419e-b24e-200924ee0416
:END:
Windows 用と Linux 用の Maxima バイナリを手に入れることができます。
これらには互換性おある Common Lisp か、実行可能な Lisp のイメージが必要です。
Mac OS X のユーザーは、 brew か MacPorts を通してインストールすることができます。
Maxima を実行できることがわかっているオペレーティングシステムと Lisp の実装の組み合わせは、
Maxima ports ページ上で見つけることができます。

複数の Maxima のバージョンがあり、それぞれが少し異なった名前をもっています。
変数 =org-babel-maxima-command= を、 Maxima の実行可能ファイルの名前に設定することができます。
デフォルト値は "maxima" です。

Maxima には =Emacs= モードがついてきます。
それを設定するための指示を、emacswiki 上で見つけることができます。
=imaxima= は、
=Emacs= のウインドウの中で完全にタイプセットされた数式を表示することができる、=Emacs= のフロントエンドです。

=org-babel-load-languages= に対して一行を追加することによって、
Maxima をアクティブ化しなければなりません:

#+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((maxima . t))) ; this line activates maxima
#+END_SRC

**** Org Mode Features for Maxima Source Code Blocks
:PROPERTIES:
:ID:       58172481-58a2-4b0c-a26e-357da0c6f065
:END:
***** ヘッダー引数
:PROPERTIES:
:ID:       07b7c404-fd7e-4ebb-a926-2e537051478e
:END:
Maxima 固有のデフォルトのヘッダー引数の値はありません。

Maxima に対してコマンドライン引数を渡すために、 
ヘッダー引数 =:cmdline= を使うことができます。

***** セッションのサポート
:PROPERTIES:
:ID:       529ba49c-b45f-4833-99d2-dd81264fc301
:END:

Maxima の Org mode サポートはセッションをサポートしていません。

***** 結果の型
:PROPERTIES:
:ID:       62d72d38-1f6a-46a9-bd4d-320e6609fc02
:END:
Maxima は完全な範囲の結果の酒類を生成します。

**** 使用例
:PROPERTIES:
:ID:       19ab38d9-bd18-4dbf-92e8-4003c1313904
:END:

***** 計算機
:PROPERTIES:
:ID:       55ddd9bb-1b51-4dc6-97ef-d2a32b15c4f5
:END:
次のソースコードブロックは =maxima= を計算機として使い、
ここではべき乗は変数を使って渡されています。

#+BEGIN_SRC org  :eval no
,#+name: test-maxima
,#+header: :exports results
,#+header: :var x=1.3121254
,#+begin_src maxima 
  programmode: false;
  print(12^x);
,#+end_src
#+END_SRC

#+name: test-maxima
#+header: :exports results
#+header: :var x=1.3121254
#+begin_src maxima 
  programmode: false;
  print(12^x);
#+end_src

#+RESULTS: test-maxima
#+begin_example
26.06280316745401
#+end_example


***** ソルバー
:PROPERTIES:
:ID:       3dd8640d-7080-41c3-b5dc-40d96b9c7145
:END:
もちろん =maxima= は計算機以上のことを行なうことができます。

#+begin_example
,#+name: solve-maxima
,#+header: :exports results
,#+begin_src maxima :results output
  programmode: false;
  eq: x**2-16 = 0;
  solution: solve(eq, x);
  print(solution);
,#+end_src
#+end_example

#+name: solve-maxima
#+header: :exports results
#+begin_src maxima :results output
  programmode: false;
  eq: x**2-16 = 0;
  solution: solve(eq, x);
  print(solution);
#+end_src

#+RESULTS: solve-maxima
#+begin_example
solve: solution:
                                    x = - 4
                                     x = 4
[%t1, %t2] 
#+end_example


***** 3D プロット
:PROPERTIES:
:ID:       c0ad9afa-4592-477e-8809-b8a90208af10
:END:
=gnuplot= (4.0 以降) がインストールされていたら、
3D グラフィックが可能です。
この例は、maxima/gnuplot インターフェースのチュートリアルからの例です。

#+begin_example
,#+name: 3d-maxima
,#+header: :file images/maxima-3d.png
,#+header: :exports results
,#+header: :results graphics
,#+begin_src maxima 
  programmode: false;
  plot3d(atan(-x^2+y^3/4),[x,-4,4],[y,-4,4],[grid,50,50],[gnuplot_pm3d,true]);
,#+end_src
#+end_example

#+name: 3d-maxima
#+header: :file images/maxima-3d.png
#+header: :results graphics
#+header: :exports results
#+begin_src maxima 
  programmode: false;
  plot3d(atan(-x^2+y^3/4),[x,-4,4],[y,-4,4],[grid,50,50],[gnuplot_pm3d,true]);
#+end_src

#+RESULTS: 3d-maxima
[[file:images/maxima-3d.png]]



***** Maxima の LaTeX 出力のインライン表示
:PROPERTIES:
:ID:       82628846-e3c4-481e-979c-387f0e3a25a6
:END:
Maxima code Maxima のコードを
can be evaluated 評価して、
and displayed 表示することがでいきます
inline インラインで
in Org mode Org mode の中で
  through babel babel  [fn:1] を通して
as in the example below, 下の例のように
based 基いて
on RS initial  example.

#+begin_example
,#+NAME: solve-maxima
,#+HEADER: :exports none
,#+BEGIN_SRC maxima :results raw
  tex(exp(-x)/x);
,#+END_SRC
#+end_example

#+NAME: export-latex
#+HEADER: :exports results
#+BEGIN_SRC maxima :results raw
  tex(exp(-x)/x);
#+END_SRC

#+RESULTS: export-latex
$${{e^ {- x }}\over{x}}$$



******  LaTeX コードのインライン表示の切り替え
:PROPERTIES:
:ID:       f7647288-da5e-4395-bb1b-0ad3027835b5
:END:
'C-c C-x C-l' によって、Org mode の中の LaTeX のコードを
インラインで表示することができます。
インライン表示を取り除くには、'C-c C-c' が使われます。
これはマニュアルの中でさらに説明されています。 [fn:2].

****** 出力のスケールの設定
:PROPERTIES:
:ID:       3d2493da-ea6c-4323-9f83-5c2f6ea541bb
:END:
数式のインライン表示が読みにくかったら、
変数 'org-format-latex-options' の
:scale 変数を 1 より大きな値に設定することによって、スケールを設定することができます。


****** エクスポート
:PROPERTIES:
:ID:       8731d4c8-4d45-400f-b9c0-b43782067752
:END:
これは html (C-c C-e b) と pdf (C-c C-e d) の両方へ綺麗にエクスポートされます。
マニュアルの中の [fn:3] と [fn:4] を見てください。

****** Noweb 展開
:PROPERTIES:
:ID:       442890ee-06ac-4123-aa3a-041a4f23a7db
:END:
_注意:_ I have not tested this yet, 私はまだこれを試していませんが、
メーリングリスト上で Eric Schulte が次のように言いました:
「別の方法としては、本当に綺麗な出力を得たいのであれば、
LaTeX のコードブロックの中に imaxima のコードブロックの結果を挿入するために
noweb 展開 [fn:5] を使い、
エクスポートのターゲットに依存して、異なる種類のイメージへ imaxima の出力を変換するために、
既存の  LaTeX コードブロック機能を使うことができるでしょう。」


****** Footnotes
:PROPERTIES:
:ID:       8a816518-0220-4cd7-9cfb-d53470c6b87b
:END:
[fn:1] (info "(org)Library of Babel")
[fn:2] (info "(org)Previewing LaTeX fragments")
[fn:3] (info "(org)Exporting code blocks")
[fn:4] (info "(org)The export dispatcher")
[fn:5] (info "(org)noweb")





** IPython の Org mode 用のセットアップ                            :@Office:
:PROPERTIES:
:LOCATION: Office
:Added: [2018-07-05 木 10:28]
:ID:       643561e8-7596-4f86-a0b6-90043198efa4
:END:
:CLOCK:
CLOCK: [2018-07-05 木 10:29]--[2018-07-05 木 12:24] =>  1:55
CLOCK: [2018-07-05 木 10:28]--[2018-07-05 木 10:29] =>  0:01
:END:

- https://github.com/gregsexton/ob-ipython
- https://www.lifewithpython.com/2015/02/python-run-specific-process-when-IPython-starts.html

*** IPython のプロファイルの作成
:PROPERTIES:
:ID:       3a4e3384-04da-440a-80d4-b2185dc882a4
:END:
ipython profile create

- .ipython/profile_default/ipython_config.py
- .ipython/profile_default/ipython_kernel_config.py
*** 必用なパッケージのインストール
:PROPERTIES:
:ID:       f22885c6-5d5c-422a-99c1-2dfa41917737
:END:
tabulate モジュールが必要なのでインストールします

: conda install tabulate
*** .ipython/profile_default/startup/ob-ipython.py の編集
:PROPERTIES:
:ID:       69941b23-2614-4138-bab8-3f8edc97651a
:END:

ob-ipython 
will display 表示します
anything 全てのことを
back from ipython IPython から返された
with the mime type ‘text/org’ verbatim. 
This これは
allows 可能にします
you and others to create formatters that output raw org. 
For example, drop this これを
in your ipython startup file
 to have arrays and dataframes 
rendered as org tables:


#+BEGIN_SRC ipython  :eval no
import IPython
from tabulate import tabulate

class OrgFormatter(IPython.core.formatters.BaseFormatter):
    def __call__(self, obj):
        try:
            return tabulate(obj, headers='keys',
                            tablefmt='orgtbl', showindex='always')
        except:
            return None

ip = get_ipython()
ip.display_formatter.formatters['text/org'] = OrgFormatter()
#+END_SRC
    
* 参考文献
:PROPERTIES:
:ID:       dad3f7ec-ddf8-4b56-8992-6f5c17f5f7ef
:END:

- [[https://www.offerzen.com/blog/literate-programming-empower-your-writing-with-emacs-org-mode][Literate Programming: Empower Your Writing with Emacs Org-Mode - OfferZen]]
- [[https://github.com/dfeich/org-babel-examples][GitHub - dfeich/org-babel-examples: Examples using emacs org mode babel inline source code with different backend languages]]


* 付録
:PROPERTIES:
:ID:       cf09331c-1e75-4422-a8b0-55d104dce35e
:END:
#+LATEX: \appendix
** 後書き
:PROPERTIES:
:ID:       eb66cb65-8f29-44c1-b2fb-425f56486dc9
:END:

後書きを書きます


#+INCLUDE: "~/Org/Templates/latex_bit_index.org" 
# 奥付



